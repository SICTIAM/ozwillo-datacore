<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xmlns:cxf="http://cxf.apache.org/core"
      xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.1.xsd
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd">

   <!-- default & overriding some properties (BEFORE import to take precedence over imported properties)
   (overriding ones are at end of comma-separated location)
   Lowest order takes precedence, here -1 to allow ex. to be overriden by test at -2, see
   http://stackoverflow.com/questions/11645360/overriding-properties-in-spring-3-1-with-a-local-properties-file
   However this doesn't work for -deploy*.properties, which has to be put instead in the same
   property placeholder as -server.properties instead and after it to work.
   Moreover without a first * after classpath (for jars ?) * doesn't work !
   See also http://www.baeldung.com/2012/02/06/properties-with-spring/ -->
   <context:property-placeholder location="classpath:oasis-datacore-rest-api.properties,classpath:oasis-datacore-rest-server.properties,classpath*:oasis-datacore-deploy*.properties"
      order="-1" ignore-unresolvable="true"/><!-- so defaults to importing PropertyPlaceholder/*Resolver -->
   
   <import resource="classpath:oasis-datacore-core-context.xml" />
   
   <import resource="classpath:oasis-datacore-security-mock-context.xml" />  
   <import resource="classpath:oasis-datacore-security-context.xml" />
   <!-- reusing client for init of samples : -->
   <import resource="classpath:oasis-datacore-rest-client-context.xml" />
   <!-- Client for AuditLog API -->
   <import resource="classpath:oasis-datacore-kernel-client-context.xml" />

   <import resource="classpath:META-INF/cxf/cxf.xml" />
   <!-- import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/ -->
   <!-- would be for test server but NO : OldSpringSupport [WARN] Import of META-INF/cxf/cxf-extension-http-jetty.xml has been deprecated and is unnecessary-->


   <!-- NB. war-less webapp deployment on Jetty could be configured here -->
   <!-- import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

   <httpj:engine-factory id="cxf-engine" bus="cxf">
      <httpj:engine port="${svc.port:8180}" sendServerVersion="false">
         <httpj:threadingParameters minThreads="5" maxThreads="150" />
         <httpj:connector>
            <bean class="org.eclipse.jetty.server.bio.SocketConnector">
               <property name="port" value="${svc.port:8180}" />
            </bean>
         </httpj:connector>
         <httpj:handlers>
            <ref bean="web-server-context-static" />
            <bean class="org.eclipse.jetty.server.handler.DefaultHandler" />
         </httpj:handlers>
      </httpj:engine>
   </httpj:engine-factory>

   <bean id="webappClassPathResource" class="org.springframework.core.io.ClassPathResource">
      <constructor-arg value="/webapp"/>
   </bean>
   <bean id="webappClassPathResourceUri" factory-bean="webappClassPathResource" factory-method="getURI"/>
   <bean id="webappClassPathResourceUriString" factory-bean="webappClassPathResourceUri" factory-method="toString"/>
   <bean name="web-server-context-static" class="org.eclipse.jetty.server.handler.ContextHandler">
      <property name="contextPath" value="/swagger" />
      <property name="resourceBase" ref="webappClassPathResourceUriString"/>
      <!- property name="handler">
         <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
            <property name="resourceBase" value="./" />
         </bean>
      </property ->
   </bean -->

   <!-- for caching & context -->
   <!-- context:component-scan base-package="org.oasis.datacore.rest.api" />
   <context:component-scan base-package="org.oasis.datacore.rest.client" / -->
   <context:component-scan base-package="org.oasis.datacore.rest.server" />
   <context:component-scan base-package="org.oasis.datacore.model.rest.server" />
   <context:component-scan base-package="org.oasis.datacore.sample" />
   <context:annotation-config /><!-- actually auto enabled by previous line -->

   <!-- server CXF Bus
   All conf (features, properties, interceptors) is rather done on endpoints
   to avoid them being overriden by another Bus imported from another project or in test. 
   But if it is required, make sure it overrides the -client's if used together,
   by importing it after the client's -->
   <cxf:bus>
      <cxf:features>
      </cxf:features>
      <cxf:properties>
      </cxf:properties>
   </cxf:bus>
   
   
   <!-- provides HTTP protocol info to JAXRS server impl -->
   <bean id="datacore.cxfJaxrsApiProvider" class="org.oasis.datacore.rest.server.cxf.CxfJaxrsApiProvider"/>
   
   
   <!-- SWAGGER -->
   <!-- Swagger API listing resource -->
   <bean id="swagger.resourceJSON" class="com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON" />
   <!-- Swagger writers -->
   <bean id="swagger.resourceWriter" class="com.wordnik.swagger.jaxrs.listing.ResourceListingProvider" />
   <bean id="swagger.apiWriter" class="com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider" />
   
   
   <!-- apiImpls taken out to allow injection in test -->
   <bean id="datacoreApiImpl" class="org.oasis.datacore.rest.server.DatacoreApiImpl"/>
   <bean id="datacore.model.apiImpl" class="org.oasis.datacore.model.rest.server.DataModelApiImpl"/>
   <bean id="datacore.rights.apiImpl" class="org.oasis.datacore.rights.api.impl.RightsApiImpl"/>
   <bean id="datacore.contribution.apiImpl" class="org.oasis.datacore.contribution.api.impl.ContributionApiImpl"/>
   
   <bean id="queryParsingService" class="org.oasis.datacore.rest.server.parsing.service.impl.QueryParsingServiceImpl" />
   <bean id="historizationService" class="org.oasis.datacore.historization.service.impl.HistorizationServiceImpl"/>
   <bean id="contributionService" class="org.oasis.datacore.contribution.service.impl.ContributionServiceImpl"/>
   
   <!-- mapper taken out to configure it (allow to inject it in ArrayServerInInterceptor, register modules) -->
   <bean id="datacoreApiServer.objectMapper" class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/>
   <bean id="datacoreApiServer.jacksonJsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
      <constructor-arg><ref bean="datacoreApiServer.objectMapper"/></constructor-arg>
   </bean>
   <!-- provider configuration helping supporting POST of single DCResource.
   Let Jackson accepting single value as ARRRAY. See more details in ArrayServerInInterceptor -->
   <bean factory-bean="datacoreApiServer.jacksonJsonProvider" factory-method="enable">
      <constructor-arg value="ACCEPT_SINGLE_VALUE_AS_ARRAY"/>
      <constructor-arg value="true"/><!-- NOT USED -->
   </bean>

   <!-- Spring configuration for Datacore API CXF server -->
   <jaxrs:server id="datacoreApiServer" address="${datacoreApiServer.jaxrsBaseUrl}"
         staticSubresourceResolution="true"><!-- optimization since no JAXRS annotations on impls,
         see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-Staticresolutionofsubresources -->
      <jaxrs:serviceBeans>
         <ref bean="datacoreApiImpl"/>
         <ref bean="datacore.model.apiImpl"/>
         <ref bean="datacore.rights.apiImpl" /> 
         <ref bean="datacore.contribution.apiImpl" /> 
         <ref bean="swagger.resourceJSON" />
         <bean class="org.oasis.datacore.rest.server.RootRedirectResource">
            <property name="targetUri" value="/swagger-ui/index.html"/>
         </bean>
      </jaxrs:serviceBeans>
      <jaxrs:providers>
         <ref bean="datacoreApiServer.jacksonJsonProvider"/>
         <!-- to add to response error message built out of exception (ex. if WebApplicationException not thrown explicity) :
         (see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-CustomizingdefaultWebApplicationExceptionmapper ) -->
         <!-- bean class="org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper">
            <property name="addMessageToResponse" value="true"/>
         </bean -->
         <bean class="org.oasis.datacore.rest.server.security.AccessDeniedExceptionMapper"/><!-- to HTTP 403 -->
         <ref bean="swagger.resourceWriter" />
         <ref bean="swagger.apiWriter" />
      </jaxrs:providers>
      <!-- Single value array POST handling interceptors (rather than whole bus) : -->
      <jaxrs:inInterceptors>
		   <bean class="org.oasis.datacore.rest.server.security.mock.MockLoginServerInInterceptor"/><!-- TODO MOCK move -->
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerInInterceptor">
            <property name="objectMapper"><ref bean="datacoreApiServer.objectMapper"/></property>
         </bean>
         <bean class="org.oasis.datacore.kernel.client.TimeTaggerInInterceptor"/>
      </jaxrs:inInterceptors>
      <jaxrs:outInterceptors>
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerOutInterceptor"/>
         <bean class="org.oasis.datacore.kernel.client.TimeComputerOutInterceptor"/>
         <!-- <bean class="org.oasis.datacore.rest.server.security.mock.MockLoginServerOutInterceptor"/> --><!-- TODO MOCK move -->
      </jaxrs:outInterceptors>
      <!-- TODO also autn --><!-- bean id="authorizationFilter" class="com.bar.providers.AuthorizationRequestHandler"/ -->
      <jaxrs:features>
         <cxf:logging/>
      </jaxrs:features>
      <jaxrs:properties>
         <!-- Prevents logging WebApplicationException not HTTP 400 or 500 -->
         <entry key="org.apache.cxf.logging.FaultListener">
            <bean class="org.oasis.datacore.rest.server.cxf.ClientServerErrorFaultListener"/>
         </entry>
      </jaxrs:properties>
   </jaxrs:server>
   
   
   <!-- SWAGGER - this scans the classes for resources -->
   <bean id="swaggerConfig" class="com.wordnik.swagger.jaxrs.config.BeanConfig">
      <property name="resourcePackage" value="org.oasis.datacore.rest.api"/>
      <property name="version" value="1.0.0"/>
      <property name="basePath" value="${datacoreApiServer.baseUrl}"/>
      <property name="title" value="Datacore Resource API"/>
      <property name="description" value="${datacore.api.doc}"/>
      <property name="contact" value="http://www.oasis-eu.org"/>
      <property name="license" value="Apache 2.0 License"/><!-- TODO LGPL ??? -->
      <property name="licenseUrl" value="http://www.apache.org/licenses/LICENSE-2.0.html"/>
      <property name="scan" value="true"/>
   </bean>
   
</beans>
