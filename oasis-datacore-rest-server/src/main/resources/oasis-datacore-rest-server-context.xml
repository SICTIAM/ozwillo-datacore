<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xmlns:cxf="http://cxf.apache.org/core"
      xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.2.xsd
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd">
   
   <!-- Allows to resolve spring properties placeholders (for Swagger ?) -->
   <bean id="springPlaceholderResolver" class="org.oasis.datacore.rest.server.SpringPlaceholderResolver"/>
   
   
   <!-- Server : -->
   <!-- scanning for caching & context -->
   <!-- context:component-scan base-package="org.oasis.datacore.rest.api" />
   <context:component-scan base-package="org.oasis.datacore.rest.client" / -->
   <context:component-scan base-package="org.oasis.datacore.rest.server" />
   <context:component-scan base-package="org.oasis.datacore.server.parsing.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.model.resource" />
   <context:component-scan base-package="org.oasis.datacore.model.rest.server" />
   <context:component-scan base-package="org.oasis.datacore.rights.api.impl" />
   <context:component-scan base-package="org.oasis.datacore.historization.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.contribution.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.contribution.api.impl" />
   <context:component-scan base-package="org.oasis.datacore.sample" />
   <context:annotation-config /><!-- actually auto enabled by previous line -->
   
   
   <!-- REST : -->
   <import resource="classpath:META-INF/cxf/cxf.xml" />
   <!-- import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/ -->
   <!-- would be for test server but NO : OldSpringSupport [WARN] Import of META-INF/cxf/cxf-extension-http-jetty.xml has been deprecated and is unnecessary-->


   <!-- NB. war-less webapp deployment on Jetty could be configured here -->
   <!-- import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

   <httpj:engine-factory id="cxf-engine" bus="cxf">
      <httpj:engine port="${svc.port:8180}" sendServerVersion="false">
         <httpj:threadingParameters minThreads="5" maxThreads="150" />
         <httpj:connector>
            <bean class="org.eclipse.jetty.server.bio.SocketConnector">
               <property name="port" value="${svc.port:8180}" />
            </bean>
         </httpj:connector>
         <httpj:handlers>
            <ref bean="web-server-context-static" />
            <bean class="org.eclipse.jetty.server.handler.DefaultHandler" />
         </httpj:handlers>
      </httpj:engine>
   </httpj:engine-factory>

   <bean id="webappClassPathResource" class="org.springframework.core.io.ClassPathResource">
      <constructor-arg value="/webapp"/>
   </bean>
   <bean id="webappClassPathResourceUri" factory-bean="webappClassPathResource" factory-method="getURI"/>
   <bean id="webappClassPathResourceUriString" factory-bean="webappClassPathResourceUri" factory-method="toString"/>
   <bean name="web-server-context-static" class="org.eclipse.jetty.server.handler.ContextHandler">
      <property name="contextPath" value="/swagger" />
      <property name="resourceBase" ref="webappClassPathResourceUriString"/>
      <!- property name="handler">
         <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
            <property name="resourceBase" value="./" />
         </bean>
      </property ->
   </bean -->

   <!-- server CXF Bus
   All conf (features, properties, interceptors) is rather done on endpoints
   to avoid them being overriden by another Bus imported from another project or in test. 
   But if it is required, make sure it overrides the -client's if used together,
   by importing it after the client's -->
   <cxf:bus>
      <cxf:features>
      </cxf:features>
      <cxf:properties>
      </cxf:properties>
   </cxf:bus>
   
   
   <!-- provides HTTP protocol info to JAXRS server impl -->
   <bean id="datacore.cxfJaxrsApiProvider" class="org.oasis.datacore.rest.server.cxf.CxfJaxrsApiProvider"/>
   
   <!-- mapper taken out to configure it (allow to inject it in ArrayServerInInterceptor, register modules) -->
   <bean id="datacoreApiServer.objectMapper" class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/>
   <bean id="datacoreApiServer.jacksonJsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
      <constructor-arg><ref bean="datacoreApiServer.objectMapper"/></constructor-arg>
   </bean>
   
   <!-- Json-ld Provider :
   server-side, using server's objectMapper -->
   <bean id="datacoreApiServer.JsonLdJavaRdfProvider" class="org.oasis.datacore.rest.api.util.JsonLdJavaRdfProvider">
      <property name="objectMapper"><ref bean="datacoreApiServer.objectMapper"/></property>
      <property name="clientSide" value="false"/>
   </bean>

   <!-- provider configuration helping supporting POST of single DCResource.
   Let Jackson accepting single value as ARRRAY. See more details in ArrayServerInInterceptor -->
   <bean factory-bean="datacoreApiServer.jacksonJsonProvider" factory-method="enable">
      <constructor-arg value="ACCEPT_SINGLE_VALUE_AS_ARRAY"/>
      <constructor-arg value="true"/><!-- NOT USED -->
   </bean>

   <!-- Spring configuration for Datacore API CXF server -->
   <jaxrs:server id="datacoreApiServer" address="${datacoreApiServer.jaxrsBaseUrl}"
         staticSubresourceResolution="true"><!-- optimization since no JAXRS annotations on impls,
         see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-Staticresolutionofsubresources -->
      <jaxrs:serviceBeans>
         <ref bean="datacoreApiImpl"/>
         <ref bean="datacore.model.apiImpl"/>
         <ref bean="datacore.rights.apiImpl" /> 
         <ref bean="datacore.contribution.apiImpl" /> 
         <ref bean="swagger.resourceJSON" />
         <bean class="org.oasis.datacore.rest.server.RootRedirectResource">
            <property name="targetUri" value="${datacoreApiServer.baseUrl}/dc-ui/index.html"/>
         </bean>
      </jaxrs:serviceBeans>
      <jaxrs:providers>
         <ref bean="datacoreApiServer.jacksonJsonProvider"/>
         <ref bean="datacoreApiServer.JsonLdJavaRdfProvider"/>
         <!-- to add to response error message built out of exception (ex. if WebApplicationException not thrown explicity) :
         (see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-CustomizingdefaultWebApplicationExceptionmapper ) -->
         <!-- bean class="org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper">
            <property name="addMessageToResponse" value="true"/>
         </bean -->
         <bean class="org.oasis.datacore.rest.server.security.AccessDeniedExceptionMapper"/><!-- to HTTP 403 -->
         <ref bean="swagger.resourceWriter" />
         <ref bean="swagger.apiWriter" />
      </jaxrs:providers>
      <!-- Single value array POST handling interceptors (rather than whole bus) : -->
      <jaxrs:inInterceptors>
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerInInterceptor">
            <property name="objectMapper"><ref bean="datacoreApiServer.objectMapper"/></property>
         </bean>
         <bean class="org.oasis.datacore.monitoring.TimeTaggerInInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.ContextInInterceptor"/>
      </jaxrs:inInterceptors>
      <jaxrs:outInterceptors>
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerOutInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.TimeComputerOutInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.SendEventsInterceptor"/>
      </jaxrs:outInterceptors>
      <!-- TODO also autn --><!-- bean id="authorizationFilter" class="com.bar.providers.AuthorizationRequestHandler"/ -->
      <jaxrs:features>
         <cxf:logging/>
      </jaxrs:features>
      <jaxrs:properties>
         <!-- Prevents logging WebApplicationException not HTTP 400 or 500 -->
         <entry key="org.apache.cxf.logging.FaultListener">
            <bean class="org.oasis.datacore.rest.server.cxf.ClientServerErrorFaultListener"/>
         </entry>
      </jaxrs:properties>
   </jaxrs:server>
   
</beans>
