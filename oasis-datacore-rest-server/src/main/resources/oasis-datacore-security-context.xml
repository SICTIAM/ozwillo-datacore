<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.1.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

   <context:property-placeholder location="classpath:oasis-datacore-rest-api.properties,classpath:oasis-datacore-rest-server.properties,classpath*:oasis-datacore-deploy*.properties"
      order="-1" ignore-unresolvable="true"/>

	<oauth:resource-server id="oauth2ProviderFilter" resource-id="oasis-datacore" token-services-ref="tokenServices" />
	
	<security:http pattern="/dc/**" entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager" authentication-manager-ref="authenticationManager" create-session="never">
		<security:intercept-url pattern="/**" access="SCOPE_DATACORE, IS_AUTHENTICATED_FULLY" />
		<security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthenticationFilter" />
		<security:custom-filter ref="oauth2ProviderFilter" after="BASIC_AUTH_FILTER" /> <!--  before="PRE_AUTH_FILTER" -->
		<security:access-denied-handler ref="oauthAccessDeniedHandler" />
	</security:http>
	
	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
	    <property name="authenticationManager" ref="datacore.AuthenticationManager" />
	    <property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
	</bean>
	
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
    	<property name="realmName" value="datacore" />
	</bean>
	
     <security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="clientDetailsUserService" />
	</security:authentication-manager>

  	<oauth:client-details-service id="clientDetailsService">
		<oauth:client
			client-id="${datacoreOAuthClientDetailsService.client_id}"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
         authorities="ROLE_CLIENT" scope="datacore"
			secret="${datacoreOAuthClientDetailsService.client_secret}" />
	</oauth:client-details-service>
	
	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetailsService" />
	</bean> 

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="datacore" />
	</bean>
 
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	
	<bean id="tokenServices" class="org.oasis.datacore.core.security.oauth2.RemoteTokenServices">
    	<property name="checkTokenEndpointUrl" value="${kernel.checkTokenEndpointUrl}" />
    	<property name="userInfoEndpointUrl" value="${kernel.userInfoEndpointUrl}" />
        <property name="clientId" value="${datacoreOAuthTokenService.client_id}" />
        <property name="clientSecret" value="${datacoreOAuthTokenService.client_secret}" />
    </bean>
	
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore">
	</bean>

</beans>