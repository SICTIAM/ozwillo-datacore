package org.oasis.datacore.sample.converter;

import java.util.ArrayList;
import java.util.List;

import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;

/**
 * Shows how a converter can be used : for denormalization,
 * completing model (BUT lifecycle events are better at that),
 * custom serialization, while still having ex. id gen features
 * 
 * Also used to test lifecycle events in Spring Data on MongoDB.
 * 
 * (also shows manual collection creation & indexing)
 * 
 * see http://docs.spring.io/spring-data/data-document/docs/current/reference/html/#d0e2670
 * 
 * @author mdutoo
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:oasis-datacore-crm-test-context.xml" })
public class ConverterAndEventTest {
   
   @Autowired
   private MongoOperations mgo;

   @Test
   public void test() {
      // db cleanup (TODO in setup / teardown)
      mgo.dropCollection("examples");
      mgo.dropCollection(Document.class);
      
      // for non auto (annotated) collections, create & setup indexes
      DBCollection examplesColl = mgo.createCollection("examples");
      examplesColl.ensureIndex(new BasicDBObject("_id", null), null, true);
      examplesColl.ensureIndex(new BasicDBObject("uri", null), null, false); // TODO Q false ?????
      
      String docBaseUri = "http://data.oasis-eu.org/document/";
      
      // create new
      Document doc = new Document();
      doc.setName("Oasis API.html");
      String docUri = docBaseUri + "projets/oasis/" + doc.getName();
      doc.setUri(docUri);
      mgo.save(doc);
      Assert.assertNotNull(doc.getId());
      Example example = new Example();
      example.setAbout(doc);
      example.setText("# Datacore API example :\n"
            + "wget http://data.oasis-eu.org/city/France/Lyon");
      mgo.save(example, "examples"); // TODO or @Document
      // check fields inited by converters :
      Assert.assertNotNull(example.getId());
      Assert.assertNotNull(example.getAboutUri());
      
      // find example by denormalized uri :
      Query exampleByUriQuery = new Query(Criteria.where("of_uri").is(docUri));
      List<Example> foundExamples = mgo.find(exampleByUriQuery, Example.class, "examples"); // TODO or @Document
      Assert.assertNotNull(foundExamples);
      Assert.assertEquals(1, foundExamples.size());
      Assert.assertNotNull(foundExamples.get(0));
      Assert.assertNotNull(foundExamples.get(0).getAbout());
      Assert.assertEquals(docUri, foundExamples.get(0).getAbout().getUri());
      Assert.assertEquals(docUri, foundExamples.get(0).getAboutUri());
      
      // add some comments to test lifecycle events
      doc.setComments(new ArrayList<Comment>());
      Comment c1 = new Comment();
      c1.setUser("john");
      c1.setText("hello");
      doc.getComments().add(c1);
      Comment c2 = new Comment();
      c2.setUser("jim");
      c2.setText("hi");
      doc.getComments().add(c2);
      mgo.save(doc);
      
      Document foundDoc = mgo.findOne(new Query(new Criteria("_id").is(new ObjectId(doc.getId()))), Document.class);
      Assert.assertNotNull(foundDoc);
      Assert.assertEquals(2, foundDoc.getComments().size());
      Assert.assertNull(foundDoc.getComments().get(0).getId()); // since Comment is embedded, no @Id is generated by spring data
      
      // has produced the following lifecycle events :
      /*
onBeforeConvert Document org.oasis.datacore.sample.converter.Document@51a79b
onBeforeSave Document org.oasis.datacore.sample.converter.Document@51a79b to dbo { "_class" : "org.oasis.datacore.sample.converter.Document" , "_id" : { "$oid" : "5233016b930e343b15a91e4d"} , "uri" : "http://data.oasis-eu.org/document/projets/oasis/Oasis API.html" , "name" : "Oasis API.html" , "comments" : [ { "_id" :  null  , "user" : "john" , "text" : "hello"} , { "_id" :  null  , "user" : "jim" , "text" : "hi"}]}
onAfterSave Document org.oasis.datacore.sample.converter.Document@51a79b to dbo { "_class" : "org.oasis.datacore.sample.converter.Document" , "_id" : { "$oid" : "5233016b930e343b15a91e4d"} , "uri" : "http://data.oasis-eu.org/document/projets/oasis/Oasis API.html" , "name" : "Oasis API.html" , "comments" : [ { "_id" :  null  , "user" : "john" , "text" : "hello"} , { "_id" :  null  , "user" : "jim" , "text" : "hi"}]}
onAfterLoad Document { "_id" : { "$oid" : "5233016b930e343b15a91e4d"} , "_class" : "org.oasis.datacore.sample.converter.Document" , "uri" : "http://data.oasis-eu.org/document/projets/oasis/Oasis API.html" , "name" : "Oasis API.html" , "comments" : [ { "_id" :  null  , "user" : "john" , "text" : "hello"} , { "_id" :  null  , "user" : "jim" , "text" : "hi"}]}
onAfterConvert Document dbo { "_id" : { "$oid" : "5233016b930e343b15a91e4d"} , "_class" : "org.oasis.datacore.sample.converter.Document" , "uri" : "http://data.oasis-eu.org/document/projets/oasis/Oasis API.html" , "name" : "Oasis API.html" , "comments" : [ { "_id" :  null  , "user" : "john" , "text" : "hello"} , { "_id" :  null  , "user" : "jim" , "text" : "hi"}]} to org.oasis.datacore.sample.converter.Document@6a6bb8      
       */
      // so EMBEDDED ELEMENTS ARE NOT LISTENED TO !!
   }
   
}
